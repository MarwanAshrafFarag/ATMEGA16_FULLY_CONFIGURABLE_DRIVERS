
ATMEGA16_CONFIGURABLE_TIMER0_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000037c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  00000416  2**0
                  ALLOC
  3 .stab         00000810  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bf4  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bc 01 	jmp	0x378	; 0x378 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#ifdef PHASE_CORRECT_PWM_MODE_SET

int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2b 97       	sbiw	r28, 0x0b	; 11
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	TIMER0_CONFIGURATION Timer_configStr={FAST_PWM, SET, 0,75,P64, DISABLE_INTERRUPT};
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	98 87       	std	Y+8, r25	; 0x08
  ac:	8f 83       	std	Y+7, r24	; 0x07
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	fa 87       	std	Y+10, r31	; 0x0a
  b4:	e9 87       	std	Y+9, r30	; 0x09
  b6:	f6 e0       	ldi	r31, 0x06	; 6
  b8:	fb 87       	std	Y+11, r31	; 0x0b
  ba:	e9 85       	ldd	r30, Y+9	; 0x09
  bc:	fa 85       	ldd	r31, Y+10	; 0x0a
  be:	00 80       	ld	r0, Z
  c0:	89 85       	ldd	r24, Y+9	; 0x09
  c2:	9a 85       	ldd	r25, Y+10	; 0x0a
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	9a 87       	std	Y+10, r25	; 0x0a
  c8:	89 87       	std	Y+9, r24	; 0x09
  ca:	ef 81       	ldd	r30, Y+7	; 0x07
  cc:	f8 85       	ldd	r31, Y+8	; 0x08
  ce:	00 82       	st	Z, r0
  d0:	8f 81       	ldd	r24, Y+7	; 0x07
  d2:	98 85       	ldd	r25, Y+8	; 0x08
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	98 87       	std	Y+8, r25	; 0x08
  d8:	8f 83       	std	Y+7, r24	; 0x07
  da:	9b 85       	ldd	r25, Y+11	; 0x0b
  dc:	91 50       	subi	r25, 0x01	; 1
  de:	9b 87       	std	Y+11, r25	; 0x0b
  e0:	eb 85       	ldd	r30, Y+11	; 0x0b
  e2:	ee 23       	and	r30, r30
  e4:	51 f7       	brne	.-44     	; 0xba <main+0x28>
		Timer0_init(&Timer_configStr);
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <Timer0_init>
		Timer0_start();
  ee:	0e 94 56 01 	call	0x2ac	; 0x2ac <Timer0_start>
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x60>

000000f4 <Timer0_init>:
 * Description: Function to configure the use of TIMER0 	*
 * Arguments: Pointer to the TIMER0_CONFIGURATION structure *
 * Return: Function returns nothing							*
 ************************************************************/
void Timer0_init (TIMER0_CONFIGURATION *TIMER0_CONFIGURATION_PTR)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	00 d0       	rcall	.+0      	; 0xfe <Timer0_init+0xa>
  fe:	00 d0       	rcall	.+0      	; 0x100 <Timer0_init+0xc>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	9a 83       	std	Y+2, r25	; 0x02
 106:	89 83       	std	Y+1, r24	; 0x01
	/* RESETTING The control and interrupt bits before configuring */
	TCCR0 = 0;
 108:	e3 e5       	ldi	r30, 0x53	; 83
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	10 82       	st	Z, r1
	TIMSK = 0;
 10e:	e9 e5       	ldi	r30, 0x59	; 89
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1

	/* Setting the appropriate bits in the timer control registers */
	TCCR0 |= TIMER0_CONFIGURATION_PTR->mode;
 114:	a3 e5       	ldi	r26, 0x53	; 83
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e3 e5       	ldi	r30, 0x53	; 83
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	90 81       	ld	r25, Z
 11e:	e9 81       	ldd	r30, Y+1	; 0x01
 120:	fa 81       	ldd	r31, Y+2	; 0x02
 122:	80 81       	ld	r24, Z
 124:	89 2b       	or	r24, r25
 126:	8c 93       	st	X, r24

	/*Loading TCNT0 with the starting tick*/
	TCNT0 = TIMER0_CONFIGURATION_PTR->starting_ticks;
 128:	a2 e5       	ldi	r26, 0x52	; 82
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e9 81       	ldd	r30, Y+1	; 0x01
 12e:	fa 81       	ldd	r31, Y+2	; 0x02
 130:	82 81       	ldd	r24, Z+2	; 0x02
 132:	8c 93       	st	X, r24

	/*Saving the clock select value in its holder*/
	clk_holder = TIMER0_CONFIGURATION_PTR->clk;
 134:	e9 81       	ldd	r30, Y+1	; 0x01
 136:	fa 81       	ldd	r31, Y+2	; 0x02
 138:	84 81       	ldd	r24, Z+4	; 0x04
 13a:	80 93 67 00 	sts	0x0067, r24
	 * These bits are saved in its enumeration value 0x80					*
	 * This mode does not utilize OCx pin or OCRx register					*
	 * Any configuration regarding output compare will be discarded			*
	 * Setting TOIE0 bit in case the configuration required the interrupt   *
	 ************************************************************************/
	if(TIMER0_CONFIGURATION_PTR->mode == OVERFLOW)
 13e:	e9 81       	ldd	r30, Y+1	; 0x01
 140:	fa 81       	ldd	r31, Y+2	; 0x02
 142:	80 81       	ld	r24, Z
 144:	80 38       	cpi	r24, 0x80	; 128
 146:	71 f4       	brne	.+28     	; 0x164 <Timer0_init+0x70>
	{
		// Interrupt configuration
		if (TIMER0_CONFIGURATION_PTR->interrupt_select == ENABLE_INTERRUPT)
 148:	e9 81       	ldd	r30, Y+1	; 0x01
 14a:	fa 81       	ldd	r31, Y+2	; 0x02
 14c:	85 81       	ldd	r24, Z+5	; 0x05
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	09 f0       	breq	.+2      	; 0x154 <Timer0_init+0x60>
 152:	a3 c0       	rjmp	.+326    	; 0x29a <Timer0_init+0x1a6>
			SET_BIT(TIMSK, TOIE0);
 154:	a9 e5       	ldi	r26, 0x59	; 89
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e9 e5       	ldi	r30, 0x59	; 89
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	8c 93       	st	X, r24
 162:	9b c0       	rjmp	.+310    	; 0x29a <Timer0_init+0x1a6>
	 * These bits are saved in its enumeration value 0x88					*
	 * Configuring the operation of OC0A pin is required for this mode		*
	 * Loading the OCRx register with the required compare value			*
	 * Setting OCIE0A bit in case the configuration required the interrupt	*
	 ************************************************************************/
	else if(TIMER0_CONFIGURATION_PTR->mode ==CTC)
 164:	e9 81       	ldd	r30, Y+1	; 0x01
 166:	fa 81       	ldd	r31, Y+2	; 0x02
 168:	80 81       	ld	r24, Z
 16a:	88 38       	cpi	r24, 0x88	; 136
 16c:	f1 f4       	brne	.+60     	; 0x1aa <Timer0_init+0xb6>
	{

		/* Load the OCRx register with the compare ticks*/
		OCR0 = TIMER0_CONFIGURATION_PTR->compare_time;
 16e:	ac e5       	ldi	r26, 0x5C	; 92
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e9 81       	ldd	r30, Y+1	; 0x01
 174:	fa 81       	ldd	r31, Y+2	; 0x02
 176:	83 81       	ldd	r24, Z+3	; 0x03
 178:	8c 93       	st	X, r24
		/* Set the operation of OCx pin*/
		TCCR0|= TIMER0_CONFIGURATION_PTR->pin_mode;
 17a:	a3 e5       	ldi	r26, 0x53	; 83
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e3 e5       	ldi	r30, 0x53	; 83
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	90 81       	ld	r25, Z
 184:	e9 81       	ldd	r30, Y+1	; 0x01
 186:	fa 81       	ldd	r31, Y+2	; 0x02
 188:	81 81       	ldd	r24, Z+1	; 0x01
 18a:	89 2b       	or	r24, r25
 18c:	8c 93       	st	X, r24
		/* Interrupt configuration */
		if (TIMER0_CONFIGURATION_PTR->interrupt_select == ENABLE_INTERRUPT)
 18e:	e9 81       	ldd	r30, Y+1	; 0x01
 190:	fa 81       	ldd	r31, Y+2	; 0x02
 192:	85 81       	ldd	r24, Z+5	; 0x05
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <Timer0_init+0xa6>
 198:	80 c0       	rjmp	.+256    	; 0x29a <Timer0_init+0x1a6>
			SET_BIT(TIMSK, OCIE0);
 19a:	a9 e5       	ldi	r26, 0x59	; 89
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e9 e5       	ldi	r30, 0x59	; 89
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	8c 93       	st	X, r24
 1a8:	78 c0       	rjmp	.+240    	; 0x29a <Timer0_init+0x1a6>
	 * Compare time in the config. structure is replaced with duty cycle	*
	 * The duty cycle equation is calculated based on inversion of OCx		*
	 * Setting OCIE0A bit in case the configuration required the interrupt	*
	 ************************************************************************/

	else if(TIMER0_CONFIGURATION_PTR->mode == FAST_PWM || TIMER0_CONFIGURATION_PTR->mode == PWM_PHASE_CORRECT )
 1aa:	e9 81       	ldd	r30, Y+1	; 0x01
 1ac:	fa 81       	ldd	r31, Y+2	; 0x02
 1ae:	80 81       	ld	r24, Z
 1b0:	88 34       	cpi	r24, 0x48	; 72
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <Timer0_init+0xcc>
 1b4:	e9 81       	ldd	r30, Y+1	; 0x01
 1b6:	fa 81       	ldd	r31, Y+2	; 0x02
 1b8:	80 81       	ld	r24, Z
 1ba:	80 34       	cpi	r24, 0x40	; 64
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <Timer0_init+0xcc>
 1be:	6d c0       	rjmp	.+218    	; 0x29a <Timer0_init+0x1a6>

		/* Return from the function if duty cycle specified is larger than 100%
		 * This condition is to be edited later
		 * The goal is to prevent the compilation of this program
		 */
		if(TIMER0_CONFIGURATION_PTR->compare_time > 100)
 1c0:	e9 81       	ldd	r30, Y+1	; 0x01
 1c2:	fa 81       	ldd	r31, Y+2	; 0x02
 1c4:	83 81       	ldd	r24, Z+3	; 0x03
 1c6:	85 36       	cpi	r24, 0x65	; 101
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <Timer0_init+0xd8>
 1ca:	67 c0       	rjmp	.+206    	; 0x29a <Timer0_init+0x1a6>
			return;

		/*Checking the inversion of the mode*/
		switch(TIMER0_CONFIGURATION_PTR->pin_mode)
 1cc:	e9 81       	ldd	r30, Y+1	; 0x01
 1ce:	fa 81       	ldd	r31, Y+2	; 0x02
 1d0:	81 81       	ldd	r24, Z+1	; 0x01
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	3c 83       	std	Y+4, r19	; 0x04
 1d8:	2b 83       	std	Y+3, r18	; 0x03
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	9c 81       	ldd	r25, Y+4	; 0x04
 1de:	80 31       	cpi	r24, 0x10	; 16
 1e0:	91 05       	cpc	r25, r1
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <Timer0_init+0xf2>
 1e4:	4e c0       	rjmp	.+156    	; 0x282 <Timer0_init+0x18e>
 1e6:	eb 81       	ldd	r30, Y+3	; 0x03
 1e8:	fc 81       	ldd	r31, Y+4	; 0x04
 1ea:	e1 31       	cpi	r30, 0x11	; 17
 1ec:	f1 05       	cpc	r31, r1
 1ee:	0c f4       	brge	.+2      	; 0x1f2 <Timer0_init+0xfe>
 1f0:	48 c0       	rjmp	.+144    	; 0x282 <Timer0_init+0x18e>
 1f2:	2b 81       	ldd	r18, Y+3	; 0x03
 1f4:	3c 81       	ldd	r19, Y+4	; 0x04
 1f6:	20 32       	cpi	r18, 0x20	; 32
 1f8:	31 05       	cpc	r19, r1
 1fa:	31 f0       	breq	.+12     	; 0x208 <Timer0_init+0x114>
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	80 33       	cpi	r24, 0x30	; 48
 202:	91 05       	cpc	r25, r1
 204:	f9 f0       	breq	.+62     	; 0x244 <Timer0_init+0x150>
 206:	3d c0       	rjmp	.+122    	; 0x282 <Timer0_init+0x18e>

			case TOGGLE:	// Toggle is reserved
				break;		// return the default action of disabling the pin, this is to be edited later with the goal of creating a compiler error

			case CLEAR:		// non inverting, duty cycle  as it is
				OCR0 = (uint8)(((255)*(TIMER0_CONFIGURATION_PTR->compare_time))/100);
 208:	0c e5       	ldi	r16, 0x5C	; 92
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	e9 81       	ldd	r30, Y+1	; 0x01
 20e:	fa 81       	ldd	r31, Y+2	; 0x02
 210:	83 81       	ldd	r24, Z+3	; 0x03
 212:	48 2f       	mov	r20, r24
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	ca 01       	movw	r24, r20
 218:	9c 01       	movw	r18, r24
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	c9 01       	movw	r24, r18
 220:	96 95       	lsr	r25
 222:	98 2f       	mov	r25, r24
 224:	88 27       	eor	r24, r24
 226:	97 95       	ror	r25
 228:	87 95       	ror	r24
 22a:	82 1b       	sub	r24, r18
 22c:	93 0b       	sbc	r25, r19
 22e:	84 0f       	add	r24, r20
 230:	95 1f       	adc	r25, r21
 232:	24 e6       	ldi	r18, 0x64	; 100
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	0e 94 95 01 	call	0x32a	; 0x32a <__divmodhi4>
 23c:	cb 01       	movw	r24, r22
 23e:	f8 01       	movw	r30, r16
 240:	80 83       	st	Z, r24
 242:	1f c0       	rjmp	.+62     	; 0x282 <Timer0_init+0x18e>
				break;

			case SET:		// inverting, duty cycle is 1- the input
				OCR0 = (uint8)((255)*(1-((TIMER0_CONFIGURATION_PTR->compare_time)/100)));
 244:	ac e5       	ldi	r26, 0x5C	; 92
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e9 81       	ldd	r30, Y+1	; 0x01
 24a:	fa 81       	ldd	r31, Y+2	; 0x02
 24c:	83 81       	ldd	r24, Z+3	; 0x03
 24e:	94 e6       	ldi	r25, 0x64	; 100
 250:	69 2f       	mov	r22, r25
 252:	0e 94 89 01 	call	0x312	; 0x312 <__udivmodqi4>
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac 01       	movw	r20, r24
 260:	42 1b       	sub	r20, r18
 262:	53 0b       	sbc	r21, r19
 264:	ca 01       	movw	r24, r20
 266:	9c 01       	movw	r18, r24
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	c9 01       	movw	r24, r18
 26e:	96 95       	lsr	r25
 270:	98 2f       	mov	r25, r24
 272:	88 27       	eor	r24, r24
 274:	97 95       	ror	r25
 276:	87 95       	ror	r24
 278:	82 1b       	sub	r24, r18
 27a:	93 0b       	sbc	r25, r19
 27c:	84 0f       	add	r24, r20
 27e:	95 1f       	adc	r25, r21
 280:	8c 93       	st	X, r24
				break;
		}

		/* Interrupt configuration */
		if (TIMER0_CONFIGURATION_PTR->interrupt_select == ENABLE_INTERRUPT)
 282:	e9 81       	ldd	r30, Y+1	; 0x01
 284:	fa 81       	ldd	r31, Y+2	; 0x02
 286:	85 81       	ldd	r24, Z+5	; 0x05
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	39 f4       	brne	.+14     	; 0x29a <Timer0_init+0x1a6>
			SET_BIT(TIMSK, OCIE0);
 28c:	a9 e5       	ldi	r26, 0x59	; 89
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	e9 e5       	ldi	r30, 0x59	; 89
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	82 60       	ori	r24, 0x02	; 2
 298:	8c 93       	st	X, r24
	}
}
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <Timer0_start>:
 * Description: Set the clock source to start the timer	*
 * Arguments: VOID											*
 * Return: Function returns nothing							*
 ************************************************************/
void Timer0_start(void)
{
 2ac:	df 93       	push	r29
 2ae:	cf 93       	push	r28
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
		TCCR0 |= clk_holder;
 2b4:	a3 e5       	ldi	r26, 0x53	; 83
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e3 e5       	ldi	r30, 0x53	; 83
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	90 81       	ld	r25, Z
 2be:	80 91 67 00 	lds	r24, 0x0067
 2c2:	89 2b       	or	r24, r25
 2c4:	8c 93       	st	X, r24
}
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <Timer0_stop>:
 * Description: Clear the clock source to stop the timer	*
 * Arguments: VOID											*
 * Return: Function returns nothing							*
 ************************************************************/
void Timer0_stop(void)
{
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~(0x07);
 2d4:	a3 e5       	ldi	r26, 0x53	; 83
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e3 e5       	ldi	r30, 0x53	; 83
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 7f       	andi	r24, 0xF8	; 248
 2e0:	8c 93       	st	X, r24
}
 2e2:	cf 91       	pop	r28
 2e4:	df 91       	pop	r29
 2e6:	08 95       	ret

000002e8 <Timer0_checkFlag>:
 * Description: Check the flag to use in polling			*
 * Arguments: VOID											*
 * Return: Function returns the status of the flag register	*
 ************************************************************/
uint8 Timer0_checkFlag(void)
{
 2e8:	df 93       	push	r29
 2ea:	cf 93       	push	r28
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
	return TIFR;
 2f0:	e8 e5       	ldi	r30, 0x58	; 88
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
}
 2f6:	cf 91       	pop	r28
 2f8:	df 91       	pop	r29
 2fa:	08 95       	ret

000002fc <Timer0_clearFlag>:
 * Description: clears the interrupt flag manually			*
 * Arguments: VOID											*
 * Return: Function returns nothing							*
 ************************************************************/
void Timer0_clearFlag(void)
{
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
	TIFR= 0x03;
 304:	e8 e5       	ldi	r30, 0x58	; 88
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 83       	st	Z, r24
}
 30c:	cf 91       	pop	r28
 30e:	df 91       	pop	r29
 310:	08 95       	ret

00000312 <__udivmodqi4>:
 312:	99 1b       	sub	r25, r25
 314:	79 e0       	ldi	r23, 0x09	; 9
 316:	04 c0       	rjmp	.+8      	; 0x320 <__udivmodqi4_ep>

00000318 <__udivmodqi4_loop>:
 318:	99 1f       	adc	r25, r25
 31a:	96 17       	cp	r25, r22
 31c:	08 f0       	brcs	.+2      	; 0x320 <__udivmodqi4_ep>
 31e:	96 1b       	sub	r25, r22

00000320 <__udivmodqi4_ep>:
 320:	88 1f       	adc	r24, r24
 322:	7a 95       	dec	r23
 324:	c9 f7       	brne	.-14     	; 0x318 <__udivmodqi4_loop>
 326:	80 95       	com	r24
 328:	08 95       	ret

0000032a <__divmodhi4>:
 32a:	97 fb       	bst	r25, 7
 32c:	09 2e       	mov	r0, r25
 32e:	07 26       	eor	r0, r23
 330:	0a d0       	rcall	.+20     	; 0x346 <__divmodhi4_neg1>
 332:	77 fd       	sbrc	r23, 7
 334:	04 d0       	rcall	.+8      	; 0x33e <__divmodhi4_neg2>
 336:	0c d0       	rcall	.+24     	; 0x350 <__udivmodhi4>
 338:	06 d0       	rcall	.+12     	; 0x346 <__divmodhi4_neg1>
 33a:	00 20       	and	r0, r0
 33c:	1a f4       	brpl	.+6      	; 0x344 <__divmodhi4_exit>

0000033e <__divmodhi4_neg2>:
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255

00000344 <__divmodhi4_exit>:
 344:	08 95       	ret

00000346 <__divmodhi4_neg1>:
 346:	f6 f7       	brtc	.-4      	; 0x344 <__divmodhi4_exit>
 348:	90 95       	com	r25
 34a:	81 95       	neg	r24
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	08 95       	ret

00000350 <__udivmodhi4>:
 350:	aa 1b       	sub	r26, r26
 352:	bb 1b       	sub	r27, r27
 354:	51 e1       	ldi	r21, 0x11	; 17
 356:	07 c0       	rjmp	.+14     	; 0x366 <__udivmodhi4_ep>

00000358 <__udivmodhi4_loop>:
 358:	aa 1f       	adc	r26, r26
 35a:	bb 1f       	adc	r27, r27
 35c:	a6 17       	cp	r26, r22
 35e:	b7 07       	cpc	r27, r23
 360:	10 f0       	brcs	.+4      	; 0x366 <__udivmodhi4_ep>
 362:	a6 1b       	sub	r26, r22
 364:	b7 0b       	sbc	r27, r23

00000366 <__udivmodhi4_ep>:
 366:	88 1f       	adc	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	5a 95       	dec	r21
 36c:	a9 f7       	brne	.-22     	; 0x358 <__udivmodhi4_loop>
 36e:	80 95       	com	r24
 370:	90 95       	com	r25
 372:	bc 01       	movw	r22, r24
 374:	cd 01       	movw	r24, r26
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
