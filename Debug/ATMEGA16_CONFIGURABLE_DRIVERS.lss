
ATMEGA16_CONFIGURABLE_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000838  000008cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  000008d2  2**0
                  ALLOC
  3 .stab         00000d8c  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e03  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
  8a:	0c 94 1a 04 	jmp	0x834	; 0x834 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_SET_PORT_DIRECTION>:
 * Description :
 * Set the direction of the given port input/output.
 * If the input port number is invalid, The function terminates.
 */

void GPIO_SET_PORT_DIRECTION(uint8 port_num, uint8 port_dir){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_SET_PORT_DIRECTION+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <GPIO_SET_PORT_DIRECTION+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	6a 83       	std	Y+2, r22	; 0x02

	if (port_num < MAX_PORT_NUM)
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	10 f5       	brcc	.+68     	; 0xec <GPIO_SET_PORT_DIRECTION+0x5a>
	{
		switch (port_num)
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	3c 83       	std	Y+4, r19	; 0x04
  b0:	2b 83       	std	Y+3, r18	; 0x03
  b2:	8b 81       	ldd	r24, Y+3	; 0x03
  b4:	9c 81       	ldd	r25, Y+4	; 0x04
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	91 05       	cpc	r25, r1
  ba:	79 f0       	breq	.+30     	; 0xda <GPIO_SET_PORT_DIRECTION+0x48>
  bc:	2b 81       	ldd	r18, Y+3	; 0x03
  be:	3c 81       	ldd	r19, Y+4	; 0x04
  c0:	23 30       	cpi	r18, 0x03	; 3
  c2:	31 05       	cpc	r19, r1
  c4:	79 f0       	breq	.+30     	; 0xe4 <GPIO_SET_PORT_DIRECTION+0x52>
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	9c 81       	ldd	r25, Y+4	; 0x04
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	91 05       	cpc	r25, r1
  ce:	71 f4       	brne	.+28     	; 0xec <GPIO_SET_PORT_DIRECTION+0x5a>
		{

		case PORTB_ID:
			DDRB = port_dir;
  d0:	e7 e3       	ldi	r30, 0x37	; 55
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	80 83       	st	Z, r24
  d8:	09 c0       	rjmp	.+18     	; 0xec <GPIO_SET_PORT_DIRECTION+0x5a>
			break;

		case PORTC_ID:
			DDRC = port_dir;
  da:	e4 e3       	ldi	r30, 0x34	; 52
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	80 83       	st	Z, r24
  e2:	04 c0       	rjmp	.+8      	; 0xec <GPIO_SET_PORT_DIRECTION+0x5a>
			break;

		case PORTD_ID:
			DDRD = port_dir;
  e4:	e1 e3       	ldi	r30, 0x31	; 49
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	80 83       	st	Z, r24
	else{

		/*terminate the function*/

		}
}
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <GPIO_PORT_WRITE>:
 * Description :
 * Write the given value to a port  HIGH/LOW.
 * If the input port number is invalid, The function terminates.
 */

void GPIO_PORT_WRITE(uint8 port_num, uint8 value){
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	00 d0       	rcall	.+0      	; 0x100 <GPIO_PORT_WRITE+0x6>
 100:	00 d0       	rcall	.+0      	; 0x102 <GPIO_PORT_WRITE+0x8>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	89 83       	std	Y+1, r24	; 0x01
 108:	6a 83       	std	Y+2, r22	; 0x02

	if (port_num < MAX_PORT_NUM)
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	10 f5       	brcc	.+68     	; 0x154 <GPIO_PORT_WRITE+0x5a>
	{
		switch (port_num)
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	3c 83       	std	Y+4, r19	; 0x04
 118:	2b 83       	std	Y+3, r18	; 0x03
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	91 05       	cpc	r25, r1
 122:	79 f0       	breq	.+30     	; 0x142 <GPIO_PORT_WRITE+0x48>
 124:	2b 81       	ldd	r18, Y+3	; 0x03
 126:	3c 81       	ldd	r19, Y+4	; 0x04
 128:	23 30       	cpi	r18, 0x03	; 3
 12a:	31 05       	cpc	r19, r1
 12c:	79 f0       	breq	.+30     	; 0x14c <GPIO_PORT_WRITE+0x52>
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	9c 81       	ldd	r25, Y+4	; 0x04
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	91 05       	cpc	r25, r1
 136:	71 f4       	brne	.+28     	; 0x154 <GPIO_PORT_WRITE+0x5a>
		{

		case PORTB_ID:
			PORTB = value;
 138:	e8 e3       	ldi	r30, 0x38	; 56
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	80 83       	st	Z, r24
 140:	09 c0       	rjmp	.+18     	; 0x154 <GPIO_PORT_WRITE+0x5a>
			break;

		case PORTC_ID:
			PORTC = value;
 142:	e5 e3       	ldi	r30, 0x35	; 53
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	80 83       	st	Z, r24
 14a:	04 c0       	rjmp	.+8      	; 0x154 <GPIO_PORT_WRITE+0x5a>
			break;

		case PORTD_ID:
			PORTD = value;
 14c:	e2 e3       	ldi	r30, 0x32	; 50
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	80 83       	st	Z, r24
	}

	else{
			/* terminate the function */
		}
}
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <GPIO_PORT_READ>:
 * Returns the value of the required port input/output.
 * If the input port number is invalid, The function returns 0.
 */

uint8 GPIO_PORT_READ(uint8 port_num)
{
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	00 d0       	rcall	.+0      	; 0x168 <GPIO_PORT_READ+0x6>
 168:	00 d0       	rcall	.+0      	; 0x16a <GPIO_PORT_READ+0x8>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	89 83       	std	Y+1, r24	; 0x01

	if (port_num < MAX_PORT_NUM)
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	18 f5       	brcc	.+70     	; 0x1bc <GPIO_PORT_READ+0x5a>
	{
		switch (port_num)
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	3c 83       	std	Y+4, r19	; 0x04
 17e:	2b 83       	std	Y+3, r18	; 0x03
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	9c 81       	ldd	r25, Y+4	; 0x04
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	91 05       	cpc	r25, r1
 188:	79 f0       	breq	.+30     	; 0x1a8 <GPIO_PORT_READ+0x46>
 18a:	2b 81       	ldd	r18, Y+3	; 0x03
 18c:	3c 81       	ldd	r19, Y+4	; 0x04
 18e:	23 30       	cpi	r18, 0x03	; 3
 190:	31 05       	cpc	r19, r1
 192:	79 f0       	breq	.+30     	; 0x1b2 <GPIO_PORT_READ+0x50>
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	9c 81       	ldd	r25, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	91 05       	cpc	r25, r1
 19c:	79 f4       	brne	.+30     	; 0x1bc <GPIO_PORT_READ+0x5a>
		{

		case PORTB_ID:
			return PINB;
 19e:	e6 e3       	ldi	r30, 0x36	; 54
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	90 81       	ld	r25, Z
 1a4:	9a 83       	std	Y+2, r25	; 0x02
 1a6:	0b c0       	rjmp	.+22     	; 0x1be <GPIO_PORT_READ+0x5c>

		case PORTC_ID:
			return PINC;
 1a8:	e3 e3       	ldi	r30, 0x33	; 51
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	20 81       	ld	r18, Z
 1ae:	2a 83       	std	Y+2, r18	; 0x02
 1b0:	06 c0       	rjmp	.+12     	; 0x1be <GPIO_PORT_READ+0x5c>

		case PORTD_ID:
			return PIND;
 1b2:	e0 e3       	ldi	r30, 0x30	; 48
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	30 81       	ld	r19, Z
 1b8:	3a 83       	std	Y+2, r19	; 0x02
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <GPIO_PORT_READ+0x5c>
	}
	else
	{
		/*DO NOTHING*/
	}
	return 0;
 1bc:	1a 82       	std	Y+2, r1	; 0x02
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
}
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	cf 91       	pop	r28
 1ca:	df 91       	pop	r29
 1cc:	08 95       	ret

000001ce <GPIO_SET_PIN_DIRECTION>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, the function terminates.
 */

void GPIO_SET_PIN_DIRECTION(uint8 port_num, uint8 pin_num, uint8 pin_dir){
 1ce:	df 93       	push	r29
 1d0:	cf 93       	push	r28
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <GPIO_SET_PIN_DIRECTION+0x6>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <GPIO_SET_PIN_DIRECTION+0x8>
 1d6:	0f 92       	push	r0
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	6a 83       	std	Y+2, r22	; 0x02
 1e0:	4b 83       	std	Y+3, r20	; 0x03

	if(port_num < MAX_PORT_NUM &&  pin_num < MAX_PIN_NUM)
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <GPIO_SET_PIN_DIRECTION+0x1c>
 1e8:	9d c0       	rjmp	.+314    	; 0x324 <GPIO_SET_PIN_DIRECTION+0x156>
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	08 f0       	brcs	.+2      	; 0x1f2 <GPIO_SET_PIN_DIRECTION+0x24>
 1f0:	99 c0       	rjmp	.+306    	; 0x324 <GPIO_SET_PIN_DIRECTION+0x156>
	{
		switch (port_num)
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	3d 83       	std	Y+5, r19	; 0x05
 1fa:	2c 83       	std	Y+4, r18	; 0x04
 1fc:	8c 81       	ldd	r24, Y+4	; 0x04
 1fe:	9d 81       	ldd	r25, Y+5	; 0x05
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	91 05       	cpc	r25, r1
 204:	c1 f1       	breq	.+112    	; 0x276 <GPIO_SET_PIN_DIRECTION+0xa8>
 206:	2c 81       	ldd	r18, Y+4	; 0x04
 208:	3d 81       	ldd	r19, Y+5	; 0x05
 20a:	23 30       	cpi	r18, 0x03	; 3
 20c:	31 05       	cpc	r19, r1
 20e:	09 f4       	brne	.+2      	; 0x212 <GPIO_SET_PIN_DIRECTION+0x44>
 210:	5e c0       	rjmp	.+188    	; 0x2ce <GPIO_SET_PIN_DIRECTION+0x100>
 212:	8c 81       	ldd	r24, Y+4	; 0x04
 214:	9d 81       	ldd	r25, Y+5	; 0x05
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	91 05       	cpc	r25, r1
 21a:	09 f0       	breq	.+2      	; 0x21e <GPIO_SET_PIN_DIRECTION+0x50>
 21c:	83 c0       	rjmp	.+262    	; 0x324 <GPIO_SET_PIN_DIRECTION+0x156>
		{

		case PORTB_ID:
			if (pin_dir == PIN_INPUT)
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	88 23       	and	r24, r24
 222:	a9 f4       	brne	.+42     	; 0x24e <GPIO_SET_PIN_DIRECTION+0x80>
				CLEAR_BIT(DDRB, pin_num);
 224:	a7 e3       	ldi	r26, 0x37	; 55
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	e7 e3       	ldi	r30, 0x37	; 55
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	48 2f       	mov	r20, r24
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	28 2f       	mov	r18, r24
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 2e       	mov	r0, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <GPIO_SET_PIN_DIRECTION+0x74>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <GPIO_SET_PIN_DIRECTION+0x70>
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	8c 93       	st	X, r24
 24c:	6b c0       	rjmp	.+214    	; 0x324 <GPIO_SET_PIN_DIRECTION+0x156>
			else
				SET_BIT(DDRB,pin_num);
 24e:	a7 e3       	ldi	r26, 0x37	; 55
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	e7 e3       	ldi	r30, 0x37	; 55
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	48 2f       	mov	r20, r24
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	28 2f       	mov	r18, r24
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 2e       	mov	r0, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <GPIO_SET_PIN_DIRECTION+0x9e>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <GPIO_SET_PIN_DIRECTION+0x9a>
 270:	84 2b       	or	r24, r20
 272:	8c 93       	st	X, r24
 274:	57 c0       	rjmp	.+174    	; 0x324 <GPIO_SET_PIN_DIRECTION+0x156>
			break;

		case PORTC_ID:
			if (pin_dir == PIN_INPUT)
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	88 23       	and	r24, r24
 27a:	a9 f4       	brne	.+42     	; 0x2a6 <GPIO_SET_PIN_DIRECTION+0xd8>
			{
				CLEAR_BIT(DDRC,pin_num);
 27c:	a4 e3       	ldi	r26, 0x34	; 52
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e4 e3       	ldi	r30, 0x34	; 52
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <GPIO_SET_PIN_DIRECTION+0xcc>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <GPIO_SET_PIN_DIRECTION+0xc8>
 29e:	80 95       	com	r24
 2a0:	84 23       	and	r24, r20
 2a2:	8c 93       	st	X, r24
 2a4:	3f c0       	rjmp	.+126    	; 0x324 <GPIO_SET_PIN_DIRECTION+0x156>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
 2a6:	a4 e3       	ldi	r26, 0x34	; 52
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e4 e3       	ldi	r30, 0x34	; 52
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <GPIO_SET_PIN_DIRECTION+0xf6>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <GPIO_SET_PIN_DIRECTION+0xf2>
 2c8:	84 2b       	or	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	2b c0       	rjmp	.+86     	; 0x324 <GPIO_SET_PIN_DIRECTION+0x156>
			}
			break;

		case PORTD_ID:
			if (pin_dir == PIN_INPUT)
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	88 23       	and	r24, r24
 2d2:	a9 f4       	brne	.+42     	; 0x2fe <GPIO_SET_PIN_DIRECTION+0x130>
			{
				CLEAR_BIT(DDRD,pin_num);
 2d4:	a1 e3       	ldi	r26, 0x31	; 49
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e1 e3       	ldi	r30, 0x31	; 49
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 2e       	mov	r0, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <GPIO_SET_PIN_DIRECTION+0x124>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <GPIO_SET_PIN_DIRECTION+0x120>
 2f6:	80 95       	com	r24
 2f8:	84 23       	and	r24, r20
 2fa:	8c 93       	st	X, r24
 2fc:	13 c0       	rjmp	.+38     	; 0x324 <GPIO_SET_PIN_DIRECTION+0x156>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
 2fe:	a1 e3       	ldi	r26, 0x31	; 49
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	e1 e3       	ldi	r30, 0x31	; 49
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	48 2f       	mov	r20, r24
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <GPIO_SET_PIN_DIRECTION+0x14e>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <GPIO_SET_PIN_DIRECTION+0x14a>
 320:	84 2b       	or	r24, r20
 322:	8c 93       	st	X, r24
	}
	else
	{
		/*Terminate*/
	}
}
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	cf 91       	pop	r28
 330:	df 91       	pop	r29
 332:	08 95       	ret

00000334 <GPIO_PIN_WRITE>:
 * If the input port number or pin number are not correct, The function terminates.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 *
 */

void GPIO_PIN_WRITE(uint8 port_num, uint8 pin_num, uint8 value){
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	00 d0       	rcall	.+0      	; 0x33a <GPIO_PIN_WRITE+0x6>
 33a:	00 d0       	rcall	.+0      	; 0x33c <GPIO_PIN_WRITE+0x8>
 33c:	0f 92       	push	r0
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	6a 83       	std	Y+2, r22	; 0x02
 346:	4b 83       	std	Y+3, r20	; 0x03

	if (port_num < MAX_PORT_NUM && pin_num < MAX_PIN_NUM)
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	08 f0       	brcs	.+2      	; 0x350 <GPIO_PIN_WRITE+0x1c>
 34e:	a8 c0       	rjmp	.+336    	; 0x4a0 <__stack+0x41>
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	88 30       	cpi	r24, 0x08	; 8
 354:	08 f0       	brcs	.+2      	; 0x358 <GPIO_PIN_WRITE+0x24>
 356:	a4 c0       	rjmp	.+328    	; 0x4a0 <__stack+0x41>
	{
			switch (port_num)
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	3d 83       	std	Y+5, r19	; 0x05
 360:	2c 83       	std	Y+4, r18	; 0x04
 362:	8c 81       	ldd	r24, Y+4	; 0x04
 364:	9d 81       	ldd	r25, Y+5	; 0x05
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	91 05       	cpc	r25, r1
 36a:	e1 f1       	breq	.+120    	; 0x3e4 <GPIO_PIN_WRITE+0xb0>
 36c:	2c 81       	ldd	r18, Y+4	; 0x04
 36e:	3d 81       	ldd	r19, Y+5	; 0x05
 370:	23 30       	cpi	r18, 0x03	; 3
 372:	31 05       	cpc	r19, r1
 374:	09 f4       	brne	.+2      	; 0x378 <GPIO_PIN_WRITE+0x44>
 376:	66 c0       	rjmp	.+204    	; 0x444 <GPIO_PIN_WRITE+0x110>
 378:	8c 81       	ldd	r24, Y+4	; 0x04
 37a:	9d 81       	ldd	r25, Y+5	; 0x05
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	91 05       	cpc	r25, r1
 380:	09 f0       	breq	.+2      	; 0x384 <GPIO_PIN_WRITE+0x50>
 382:	8e c0       	rjmp	.+284    	; 0x4a0 <__stack+0x41>
			{

			case PORTB_ID:
				if (value == 1)
 384:	8b 81       	ldd	r24, Y+3	; 0x03
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	a1 f4       	brne	.+40     	; 0x3b2 <GPIO_PIN_WRITE+0x7e>
					SET_BIT(PORTB,pin_num);
 38a:	a8 e3       	ldi	r26, 0x38	; 56
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	e8 e3       	ldi	r30, 0x38	; 56
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	48 2f       	mov	r20, r24
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 2e       	mov	r0, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <GPIO_PIN_WRITE+0x74>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <GPIO_PIN_WRITE+0x70>
 3ac:	84 2b       	or	r24, r20
 3ae:	8c 93       	st	X, r24
 3b0:	77 c0       	rjmp	.+238    	; 0x4a0 <__stack+0x41>

				else if (value == 0)
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	88 23       	and	r24, r24
 3b6:	09 f0       	breq	.+2      	; 0x3ba <GPIO_PIN_WRITE+0x86>
 3b8:	73 c0       	rjmp	.+230    	; 0x4a0 <__stack+0x41>
					CLEAR_BIT(PORTB,pin_num);
 3ba:	a8 e3       	ldi	r26, 0x38	; 56
 3bc:	b0 e0       	ldi	r27, 0x00	; 0
 3be:	e8 e3       	ldi	r30, 0x38	; 56
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	48 2f       	mov	r20, r24
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	28 2f       	mov	r18, r24
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 2e       	mov	r0, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <GPIO_PIN_WRITE+0xa4>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <GPIO_PIN_WRITE+0xa0>
 3dc:	80 95       	com	r24
 3de:	84 23       	and	r24, r20
 3e0:	8c 93       	st	X, r24
 3e2:	5e c0       	rjmp	.+188    	; 0x4a0 <__stack+0x41>

				break;

			case PORTC_ID:
				if (value == 1)
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	a1 f4       	brne	.+40     	; 0x412 <GPIO_PIN_WRITE+0xde>
					SET_BIT(PORTC,pin_num);
 3ea:	a5 e3       	ldi	r26, 0x35	; 53
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e5 e3       	ldi	r30, 0x35	; 53
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 2e       	mov	r0, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <GPIO_PIN_WRITE+0xd4>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <GPIO_PIN_WRITE+0xd0>
 40c:	84 2b       	or	r24, r20
 40e:	8c 93       	st	X, r24
 410:	47 c0       	rjmp	.+142    	; 0x4a0 <__stack+0x41>

				else if (value == 0)
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	88 23       	and	r24, r24
 416:	09 f0       	breq	.+2      	; 0x41a <GPIO_PIN_WRITE+0xe6>
 418:	43 c0       	rjmp	.+134    	; 0x4a0 <__stack+0x41>
					CLEAR_BIT(PORTC,pin_num);
 41a:	a5 e3       	ldi	r26, 0x35	; 53
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e5 e3       	ldi	r30, 0x35	; 53
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	48 2f       	mov	r20, r24
 426:	8a 81       	ldd	r24, Y+2	; 0x02
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 2e       	mov	r0, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <GPIO_PIN_WRITE+0x104>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <GPIO_PIN_WRITE+0x100>
 43c:	80 95       	com	r24
 43e:	84 23       	and	r24, r20
 440:	8c 93       	st	X, r24
 442:	2e c0       	rjmp	.+92     	; 0x4a0 <__stack+0x41>

				break;

			case PORTD_ID:
				if (value == 1)
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	a1 f4       	brne	.+40     	; 0x472 <__stack+0x13>
					SET_BIT(PORTD,pin_num);
 44a:	a2 e3       	ldi	r26, 0x32	; 50
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	e2 e3       	ldi	r30, 0x32	; 50
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 2e       	mov	r0, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <__stack+0x9>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__stack+0x5>
 46c:	84 2b       	or	r24, r20
 46e:	8c 93       	st	X, r24
 470:	17 c0       	rjmp	.+46     	; 0x4a0 <__stack+0x41>

				else if (value == 0)
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	88 23       	and	r24, r24
 476:	a1 f4       	brne	.+40     	; 0x4a0 <__stack+0x41>
					CLEAR_BIT(PORTD,pin_num);
 478:	a2 e3       	ldi	r26, 0x32	; 50
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e2 e3       	ldi	r30, 0x32	; 50
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	48 2f       	mov	r20, r24
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 2e       	mov	r0, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <__stack+0x37>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <__stack+0x33>
 49a:	80 95       	com	r24
 49c:	84 23       	and	r24, r20
 49e:	8c 93       	st	X, r24
		}
		else
		{
			/* Do Nothing */
		}
}
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	cf 91       	pop	r28
 4ac:	df 91       	pop	r29
 4ae:	08 95       	ret

000004b0 <GPIO_PIN_READ>:
 * Description :
 * Returns the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */

uint8 GPIO_PIN_READ(uint8 port_num, uint8 pin_num){
 4b0:	df 93       	push	r29
 4b2:	cf 93       	push	r28
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <GPIO_PIN_READ+0x6>
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <GPIO_PIN_READ+0x8>
 4b8:	0f 92       	push	r0
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	6a 83       	std	Y+2, r22	; 0x02

	if (port_num < MAX_PORT_NUM && pin_num < MAX_PIN_NUM)
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <GPIO_PIN_READ+0x1a>
 4c8:	4e c0       	rjmp	.+156    	; 0x566 <GPIO_PIN_READ+0xb6>
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	88 30       	cpi	r24, 0x08	; 8
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <GPIO_PIN_READ+0x22>
 4d0:	4a c0       	rjmp	.+148    	; 0x566 <GPIO_PIN_READ+0xb6>
	{
		switch (port_num)
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	3d 83       	std	Y+5, r19	; 0x05
 4da:	2c 83       	std	Y+4, r18	; 0x04
 4dc:	8c 81       	ldd	r24, Y+4	; 0x04
 4de:	9d 81       	ldd	r25, Y+5	; 0x05
 4e0:	82 30       	cpi	r24, 0x02	; 2
 4e2:	91 05       	cpc	r25, r1
 4e4:	e1 f0       	breq	.+56     	; 0x51e <GPIO_PIN_READ+0x6e>
 4e6:	2c 81       	ldd	r18, Y+4	; 0x04
 4e8:	3d 81       	ldd	r19, Y+5	; 0x05
 4ea:	23 30       	cpi	r18, 0x03	; 3
 4ec:	31 05       	cpc	r19, r1
 4ee:	49 f1       	breq	.+82     	; 0x542 <GPIO_PIN_READ+0x92>
 4f0:	8c 81       	ldd	r24, Y+4	; 0x04
 4f2:	9d 81       	ldd	r25, Y+5	; 0x05
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	91 05       	cpc	r25, r1
 4f8:	b1 f5       	brne	.+108    	; 0x566 <GPIO_PIN_READ+0xb6>
		{

		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num);
 4fa:	e6 e3       	ldi	r30, 0x36	; 54
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	48 2f       	mov	r20, r24
 502:	8a 81       	ldd	r24, Y+2	; 0x02
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 2e       	mov	r0, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <GPIO_PIN_READ+0x64>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <GPIO_PIN_READ+0x60>
 518:	84 23       	and	r24, r20
 51a:	8b 83       	std	Y+3, r24	; 0x03
 51c:	25 c0       	rjmp	.+74     	; 0x568 <GPIO_PIN_READ+0xb8>

		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num);
 51e:	e3 e3       	ldi	r30, 0x33	; 51
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	48 2f       	mov	r20, r24
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 2e       	mov	r0, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <GPIO_PIN_READ+0x88>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <GPIO_PIN_READ+0x84>
 53c:	84 23       	and	r24, r20
 53e:	8b 83       	std	Y+3, r24	; 0x03
 540:	13 c0       	rjmp	.+38     	; 0x568 <GPIO_PIN_READ+0xb8>

		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num);
 542:	e0 e3       	ldi	r30, 0x30	; 48
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	48 2f       	mov	r20, r24
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 2e       	mov	r0, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <GPIO_PIN_READ+0xac>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <GPIO_PIN_READ+0xa8>
 560:	84 23       	and	r24, r20
 562:	8b 83       	std	Y+3, r24	; 0x03
 564:	01 c0       	rjmp	.+2      	; 0x568 <GPIO_PIN_READ+0xb8>
	else
	{
		/*do nothing*/
	}

	return 0;
 566:	1b 82       	std	Y+3, r1	; 0x03
 568:	8b 81       	ldd	r24, Y+3	; 0x03

}
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	cf 91       	pop	r28
 576:	df 91       	pop	r29
 578:	08 95       	ret

0000057a <main>:


#ifdef PWM_MODE_SET

int main(void)
{
 57a:	df 93       	push	r29
 57c:	cf 93       	push	r28
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	2b 97       	sbiw	r28, 0x0b	; 11
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
	TIMER0_CONFIGURATION Timer_configStr={FAST_PWM_MODE, SET, 0,75,P64, DISABLE_INTERRUPT};
 58e:	ce 01       	movw	r24, r28
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	98 87       	std	Y+8, r25	; 0x08
 594:	8f 83       	std	Y+7, r24	; 0x07
 596:	e0 e6       	ldi	r30, 0x60	; 96
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	fa 87       	std	Y+10, r31	; 0x0a
 59c:	e9 87       	std	Y+9, r30	; 0x09
 59e:	f6 e0       	ldi	r31, 0x06	; 6
 5a0:	fb 87       	std	Y+11, r31	; 0x0b
 5a2:	e9 85       	ldd	r30, Y+9	; 0x09
 5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
 5a6:	00 80       	ld	r0, Z
 5a8:	89 85       	ldd	r24, Y+9	; 0x09
 5aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	9a 87       	std	Y+10, r25	; 0x0a
 5b0:	89 87       	std	Y+9, r24	; 0x09
 5b2:	ef 81       	ldd	r30, Y+7	; 0x07
 5b4:	f8 85       	ldd	r31, Y+8	; 0x08
 5b6:	00 82       	st	Z, r0
 5b8:	8f 81       	ldd	r24, Y+7	; 0x07
 5ba:	98 85       	ldd	r25, Y+8	; 0x08
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	98 87       	std	Y+8, r25	; 0x08
 5c0:	8f 83       	std	Y+7, r24	; 0x07
 5c2:	9b 85       	ldd	r25, Y+11	; 0x0b
 5c4:	91 50       	subi	r25, 0x01	; 1
 5c6:	9b 87       	std	Y+11, r25	; 0x0b
 5c8:	eb 85       	ldd	r30, Y+11	; 0x0b
 5ca:	ee 23       	and	r30, r30
 5cc:	51 f7       	brne	.-44     	; 0x5a2 <main+0x28>
		Timer0_init(&Timer_configStr);
 5ce:	ce 01       	movw	r24, r28
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Timer0_init>
		Timer0_start();
 5d6:	0e 94 ae 03 	call	0x75c	; 0x75c <Timer0_start>
 5da:	ff cf       	rjmp	.-2      	; 0x5da <main+0x60>

000005dc <Timer0_init>:
/* Description: Function to configure the use of TIMER0
 * Arguments: Pointer to the TIMER0_CONFIGURATION structure
 * Return: Function returns nothing
 */
void Timer0_init (TIMER0_CONFIGURATION *TIMER0_CONFIGURATION_PTR)
{
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	df 93       	push	r29
 5e2:	cf 93       	push	r28
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <Timer0_init+0xa>
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	89 83       	std	Y+1, r24	; 0x01
	/* RESETTING The control and interrupt bits before configuring */
	TCCR0 = 0;
 5ee:	e3 e5       	ldi	r30, 0x53	; 83
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	10 82       	st	Z, r1
	TIMSK = 0;
 5f4:	e9 e5       	ldi	r30, 0x59	; 89
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	10 82       	st	Z, r1
	 * This mode does not utilize OCx pin, so it should be always disabled	*
	 * This mode does not utilize the OCRx register							*
	 * Any configuration regarding output compare will be discarded			*
	 * Setting TOIE0 bit in case the configuration required the interrupt   *
	 ************************************************************************/
	if(TIMER0_CONFIGURATION_PTR->mode == OVERFLOW_MODE)
 5fa:	e9 81       	ldd	r30, Y+1	; 0x01
 5fc:	fa 81       	ldd	r31, Y+2	; 0x02
 5fe:	80 81       	ld	r24, Z
 600:	80 38       	cpi	r24, 0x80	; 128
 602:	c1 f4       	brne	.+48     	; 0x634 <Timer0_init+0x58>
	{
		// Setting Waveform Generation Mode and Compare Output Mode bits
		TCCR0 |= TIMER0_CONFIGURATION_PTR->mode;
 604:	a3 e5       	ldi	r26, 0x53	; 83
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e3 e5       	ldi	r30, 0x53	; 83
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	90 81       	ld	r25, Z
 60e:	e9 81       	ldd	r30, Y+1	; 0x01
 610:	fa 81       	ldd	r31, Y+2	; 0x02
 612:	80 81       	ld	r24, Z
 614:	89 2b       	or	r24, r25
 616:	8c 93       	st	X, r24
		// Interrupt configuration
		if (TIMER0_CONFIGURATION_PTR->interrupt_select == ENABLE_INTERRUPT)
 618:	e9 81       	ldd	r30, Y+1	; 0x01
 61a:	fa 81       	ldd	r31, Y+2	; 0x02
 61c:	85 81       	ldd	r24, Z+5	; 0x05
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	09 f0       	breq	.+2      	; 0x624 <Timer0_init+0x48>
 622:	8a c0       	rjmp	.+276    	; 0x738 <Timer0_init+0x15c>
			SET_BIT(TIMSK, TOIE0);
 624:	a9 e5       	ldi	r26, 0x59	; 89
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e9 e5       	ldi	r30, 0x59	; 89
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	81 60       	ori	r24, 0x01	; 1
 630:	8c 93       	st	X, r24
 632:	82 c0       	rjmp	.+260    	; 0x738 <Timer0_init+0x15c>
	 * Setting Force output compare bit for non PWM modes					*
	 * Configuring the operation of OC0A pin								*
	 * Loading the OCRx register with the required compare value			*
	 * Setting OCIE0A bit in case the configuration required the interrupt	*
	 ************************************************************************/
	else if(TIMER0_CONFIGURATION_PTR->mode == PWM_PHASE_CORRECT)
 634:	e9 81       	ldd	r30, Y+1	; 0x01
 636:	fa 81       	ldd	r31, Y+2	; 0x02
 638:	80 81       	ld	r24, Z
 63a:	80 3c       	cpi	r24, 0xC0	; 192
 63c:	09 f4       	brne	.+2      	; 0x640 <Timer0_init+0x64>
 63e:	7c c0       	rjmp	.+248    	; 0x738 <Timer0_init+0x15c>
	 * Setting Force output compare bit for non PWM modes					*
	 * Configuring the operation of OC0A pin								*
	 * Loading the OCRx register with the required compare value			*
	 * Setting OCIE0A bit in case the configuration required the interrupt	*
	 ************************************************************************/
	else if(TIMER0_CONFIGURATION_PTR->mode ==CTC_MODE)
 640:	e9 81       	ldd	r30, Y+1	; 0x01
 642:	fa 81       	ldd	r31, Y+2	; 0x02
 644:	80 81       	ld	r24, Z
 646:	88 38       	cpi	r24, 0x88	; 136
 648:	61 f5       	brne	.+88     	; 0x6a2 <Timer0_init+0xc6>
	{
		// Setting Waveform Generation Mode and Compare Output Mode bits
		SET_BIT(TCCR0, WGM01);SET_BIT(TCCR0, FOC0);
 64a:	a3 e5       	ldi	r26, 0x53	; 83
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	e3 e5       	ldi	r30, 0x53	; 83
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	88 60       	ori	r24, 0x08	; 8
 656:	8c 93       	st	X, r24
 658:	a3 e5       	ldi	r26, 0x53	; 83
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	e3 e5       	ldi	r30, 0x53	; 83
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	80 68       	ori	r24, 0x80	; 128
 664:	8c 93       	st	X, r24
		// Load the OCRx register with the compare ticks
		OCR0 = TIMER0_CONFIGURATION_PTR->compare_time;
 666:	ac e5       	ldi	r26, 0x5C	; 92
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	e9 81       	ldd	r30, Y+1	; 0x01
 66c:	fa 81       	ldd	r31, Y+2	; 0x02
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	8c 93       	st	X, r24
		// Set the operation of OCx pin
		TCCR0|= TIMER0_CONFIGURATION_PTR->pin_mode;
 672:	a3 e5       	ldi	r26, 0x53	; 83
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	e3 e5       	ldi	r30, 0x53	; 83
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	90 81       	ld	r25, Z
 67c:	e9 81       	ldd	r30, Y+1	; 0x01
 67e:	fa 81       	ldd	r31, Y+2	; 0x02
 680:	81 81       	ldd	r24, Z+1	; 0x01
 682:	89 2b       	or	r24, r25
 684:	8c 93       	st	X, r24
		// Interrupt configuration
		if (TIMER0_CONFIGURATION_PTR->interrupt_select == ENABLE_INTERRUPT)
 686:	e9 81       	ldd	r30, Y+1	; 0x01
 688:	fa 81       	ldd	r31, Y+2	; 0x02
 68a:	85 81       	ldd	r24, Z+5	; 0x05
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	09 f0       	breq	.+2      	; 0x692 <Timer0_init+0xb6>
 690:	53 c0       	rjmp	.+166    	; 0x738 <Timer0_init+0x15c>
			SET_BIT(TIMSK, OCIE0);
 692:	a9 e5       	ldi	r26, 0x59	; 89
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	e9 e5       	ldi	r30, 0x59	; 89
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	82 60       	ori	r24, 0x02	; 2
 69e:	8c 93       	st	X, r24
 6a0:	4b c0       	rjmp	.+150    	; 0x738 <Timer0_init+0x15c>
	 * Setting Force output compare bit for non PWM modes					*
	 * Configuring the operation of OC0A pin								*
	 * Loading the OCRx register with the required compare value			*
	 * Setting OCIE0A bit in case the configuration required the interrupt	*
	 ************************************************************************/
	else if(TIMER0_CONFIGURATION_PTR->mode ==FAST_PWM_MODE)
 6a2:	e9 81       	ldd	r30, Y+1	; 0x01
 6a4:	fa 81       	ldd	r31, Y+2	; 0x02
 6a6:	80 81       	ld	r24, Z
 6a8:	88 3c       	cpi	r24, 0xC8	; 200
 6aa:	09 f0       	breq	.+2      	; 0x6ae <Timer0_init+0xd2>
 6ac:	45 c0       	rjmp	.+138    	; 0x738 <Timer0_init+0x15c>
	{
		SET_BIT(TCCR0, WGM00); SET_BIT(TCCR0, WGM01);
 6ae:	a3 e5       	ldi	r26, 0x53	; 83
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	e3 e5       	ldi	r30, 0x53	; 83
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	80 64       	ori	r24, 0x40	; 64
 6ba:	8c 93       	st	X, r24
 6bc:	a3 e5       	ldi	r26, 0x53	; 83
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	e3 e5       	ldi	r30, 0x53	; 83
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	88 60       	ori	r24, 0x08	; 8
 6c8:	8c 93       	st	X, r24
		if(TIMER0_CONFIGURATION_PTR->compare_time > 100)
 6ca:	e9 81       	ldd	r30, Y+1	; 0x01
 6cc:	fa 81       	ldd	r31, Y+2	; 0x02
 6ce:	83 81       	ldd	r24, Z+3	; 0x03
 6d0:	85 36       	cpi	r24, 0x65	; 101
 6d2:	48 f0       	brcs	.+18     	; 0x6e6 <Timer0_init+0x10a>
			OCR0 = TIMER0_CONFIGURATION_PTR->compare_time;	// The Compare ticks
 6d4:	ec e5       	ldi	r30, 0x5C	; 92
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	a9 81       	ldd	r26, Y+1	; 0x01
 6da:	ba 81       	ldd	r27, Y+2	; 0x02
 6dc:	13 96       	adiw	r26, 0x03	; 3
 6de:	8c 91       	ld	r24, X
 6e0:	13 97       	sbiw	r26, 0x03	; 3
 6e2:	80 83       	st	Z, r24
 6e4:	1d c0       	rjmp	.+58     	; 0x720 <Timer0_init+0x144>

		else
			OCR0 = (uint8)(((255)*(TIMER0_CONFIGURATION_PTR->compare_time))/100);
 6e6:	0c e5       	ldi	r16, 0x5C	; 92
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	e9 81       	ldd	r30, Y+1	; 0x01
 6ec:	fa 81       	ldd	r31, Y+2	; 0x02
 6ee:	83 81       	ldd	r24, Z+3	; 0x03
 6f0:	48 2f       	mov	r20, r24
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	ca 01       	movw	r24, r20
 6f6:	9c 01       	movw	r18, r24
 6f8:	22 0f       	add	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	c9 01       	movw	r24, r18
 6fe:	96 95       	lsr	r25
 700:	98 2f       	mov	r25, r24
 702:	88 27       	eor	r24, r24
 704:	97 95       	ror	r25
 706:	87 95       	ror	r24
 708:	82 1b       	sub	r24, r18
 70a:	93 0b       	sbc	r25, r19
 70c:	84 0f       	add	r24, r20
 70e:	95 1f       	adc	r25, r21
 710:	24 e6       	ldi	r18, 0x64	; 100
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	b9 01       	movw	r22, r18
 716:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__divmodhi4>
 71a:	cb 01       	movw	r24, r22
 71c:	f8 01       	movw	r30, r16
 71e:	80 83       	st	Z, r24

		if (TIMER0_CONFIGURATION_PTR->interrupt_select == ENABLE_INTERRUPT)
 720:	e9 81       	ldd	r30, Y+1	; 0x01
 722:	fa 81       	ldd	r31, Y+2	; 0x02
 724:	85 81       	ldd	r24, Z+5	; 0x05
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	39 f4       	brne	.+14     	; 0x738 <Timer0_init+0x15c>
			SET_BIT(TIMSK, OCIE0);
 72a:	a9 e5       	ldi	r26, 0x59	; 89
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	e9 e5       	ldi	r30, 0x59	; 89
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	82 60       	ori	r24, 0x02	; 2
 736:	8c 93       	st	X, r24
	}


	TCNT0 = TIMER0_CONFIGURATION_PTR->starting_ticks;	// The ticks at which the timer starts
 738:	a2 e5       	ldi	r26, 0x52	; 82
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	e9 81       	ldd	r30, Y+1	; 0x01
 73e:	fa 81       	ldd	r31, Y+2	; 0x02
 740:	82 81       	ldd	r24, Z+2	; 0x02
 742:	8c 93       	st	X, r24
	clk_holder = TIMER0_CONFIGURATION_PTR->clk;
 744:	e9 81       	ldd	r30, Y+1	; 0x01
 746:	fa 81       	ldd	r31, Y+2	; 0x02
 748:	84 81       	ldd	r24, Z+4	; 0x04
 74a:	80 93 67 00 	sts	0x0067, r24
}
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	cf 91       	pop	r28
 754:	df 91       	pop	r29
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	08 95       	ret

0000075c <Timer0_start>:
/* Description:
 * Function to start the timer by setting the appropriate clock source
 * Returns nothing as it only sets the appropriate bits
 */
void Timer0_start()
{
 75c:	df 93       	push	r29
 75e:	cf 93       	push	r28
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
		TCCR0 |= clk_holder;
 764:	a3 e5       	ldi	r26, 0x53	; 83
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	e3 e5       	ldi	r30, 0x53	; 83
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	90 81       	ld	r25, Z
 76e:	80 91 67 00 	lds	r24, 0x0067
 772:	89 2b       	or	r24, r25
 774:	8c 93       	st	X, r24
}
 776:	cf 91       	pop	r28
 778:	df 91       	pop	r29
 77a:	08 95       	ret

0000077c <Timer0_stop>:
/* Description:
 * Stops the timer by clearing the appropriate clock select bits
 *
 */
void Timer0_stop(void)
{
 77c:	df 93       	push	r29
 77e:	cf 93       	push	r28
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~(0x07);
 784:	a3 e5       	ldi	r26, 0x53	; 83
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	e3 e5       	ldi	r30, 0x53	; 83
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	88 7f       	andi	r24, 0xF8	; 248
 790:	8c 93       	st	X, r24
}
 792:	cf 91       	pop	r28
 794:	df 91       	pop	r29
 796:	08 95       	ret

00000798 <Timer0_checkFlag>:
/* Description:
 * Function to use in case of polling
 * Returns the status of the interrupt flag register
 */
uint8 Timer0_checkFlag(void)
{
 798:	df 93       	push	r29
 79a:	cf 93       	push	r28
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
	return TIFR;
 7a0:	e8 e5       	ldi	r30, 0x58	; 88
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
}
 7a6:	cf 91       	pop	r28
 7a8:	df 91       	pop	r29
 7aa:	08 95       	ret

000007ac <Timer0_clearFlag>:
/* Description:
 *Clears the interrupt flags by setting them to 1
 *
 */
void Timer0_clearFlag(void)
{
 7ac:	df 93       	push	r29
 7ae:	cf 93       	push	r28
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
	TIFR= 0x07;
 7b4:	e8 e5       	ldi	r30, 0x58	; 88
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	87 e0       	ldi	r24, 0x07	; 7
 7ba:	80 83       	st	Z, r24
}
 7bc:	cf 91       	pop	r28
 7be:	df 91       	pop	r29
 7c0:	08 95       	ret

000007c2 <TIMER0_setCallBack>:
/* Description:
 *Sets the callback pointer to function
 *
 */
void TIMER0_setCallBack(void(*a_ptr)(void))
{
 7c2:	df 93       	push	r29
 7c4:	cf 93       	push	r28
 7c6:	00 d0       	rcall	.+0      	; 0x7c8 <TIMER0_setCallBack+0x6>
 7c8:	cd b7       	in	r28, 0x3d	; 61
 7ca:	de b7       	in	r29, 0x3e	; 62
 7cc:	9a 83       	std	Y+2, r25	; 0x02
 7ce:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	9a 81       	ldd	r25, Y+2	; 0x02
 7d4:	90 93 69 00 	sts	0x0069, r25
 7d8:	80 93 68 00 	sts	0x0068, r24
}
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	cf 91       	pop	r28
 7e2:	df 91       	pop	r29
 7e4:	08 95       	ret

000007e6 <__divmodhi4>:
 7e6:	97 fb       	bst	r25, 7
 7e8:	09 2e       	mov	r0, r25
 7ea:	07 26       	eor	r0, r23
 7ec:	0a d0       	rcall	.+20     	; 0x802 <__divmodhi4_neg1>
 7ee:	77 fd       	sbrc	r23, 7
 7f0:	04 d0       	rcall	.+8      	; 0x7fa <__divmodhi4_neg2>
 7f2:	0c d0       	rcall	.+24     	; 0x80c <__udivmodhi4>
 7f4:	06 d0       	rcall	.+12     	; 0x802 <__divmodhi4_neg1>
 7f6:	00 20       	and	r0, r0
 7f8:	1a f4       	brpl	.+6      	; 0x800 <__divmodhi4_exit>

000007fa <__divmodhi4_neg2>:
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000800 <__divmodhi4_exit>:
 800:	08 95       	ret

00000802 <__divmodhi4_neg1>:
 802:	f6 f7       	brtc	.-4      	; 0x800 <__divmodhi4_exit>
 804:	90 95       	com	r25
 806:	81 95       	neg	r24
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__udivmodhi4>:
 80c:	aa 1b       	sub	r26, r26
 80e:	bb 1b       	sub	r27, r27
 810:	51 e1       	ldi	r21, 0x11	; 17
 812:	07 c0       	rjmp	.+14     	; 0x822 <__udivmodhi4_ep>

00000814 <__udivmodhi4_loop>:
 814:	aa 1f       	adc	r26, r26
 816:	bb 1f       	adc	r27, r27
 818:	a6 17       	cp	r26, r22
 81a:	b7 07       	cpc	r27, r23
 81c:	10 f0       	brcs	.+4      	; 0x822 <__udivmodhi4_ep>
 81e:	a6 1b       	sub	r26, r22
 820:	b7 0b       	sbc	r27, r23

00000822 <__udivmodhi4_ep>:
 822:	88 1f       	adc	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	5a 95       	dec	r21
 828:	a9 f7       	brne	.-22     	; 0x814 <__udivmodhi4_loop>
 82a:	80 95       	com	r24
 82c:	90 95       	com	r25
 82e:	bc 01       	movw	r22, r24
 830:	cd 01       	movw	r24, r26
 832:	08 95       	ret

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
